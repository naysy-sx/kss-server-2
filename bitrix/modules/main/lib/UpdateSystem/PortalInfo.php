<? namespace Bitrix\Main\UpdateSystem;$GLOBALS['____1158064882']= array(base64_decode('Z'.'nVuY3Rpb25fZXhp'.'c'.'3R'.'z'),base64_decode('ZGVmaW5lZA=='),base64_decode('cGhwdmVyc2'.'lvbg=='),base64_decode('Y2'.'xh'.'c'.'3NfZXhpc3'.'Rz'));if(!function_exists(__NAMESPACE__.'\\___386678359')){function ___386678359($_2141346854){static $_84810897= false; if($_84810897 == false) $_84810897=array('TElDR'.'U'.'5TRV9LR'.'V'.'k=','bGF'.'uZw==','dXRm','WQ==','c3'.'RhYm'.'xl','bWFpbg==','c3'.'RhYmx'.'lX3ZlcnNpb2'.'5zX29ubH'.'k=',''.'WQ='.'=',''.'Q0F'.'OR1'.'p'.'JUA==','Z3pj'.'b21w'.'cmVzcw==','W'.'Q==','Tg'.'==',''.'U1VQR'.'F9'.'E'.'QlM=','WEU=','WQ==',''.'Tg==','U'.'1VQRF9VUlM=','Q0xJRU5UX1NJ'.'V'.'EU=','U0VSVkV'.'SX05BTUU=','c3Bk',''.'bWFp'.'bg==','Y3JjX2'.'NvZGU=','',''.'ZG'.'J2','U1'.'V'.'QR'.'F9W'.'RVI=','VVBEQVRFX'.'1NZU1RF'.'TV9WRVJTSU'.'9OX0'.'E'.'=','','U'.'1VQRF9T'.'UlM'.'=','UlU=','U1VQRF9'.'DTV'.'A=','Tg'.'==','U1VQ'.'RF'.'9'.'T'.'VFM'.'=','UkE=','TElDRU5TR'.'V9TS'.'U'.'dORUQ=','Q0'.'x'.'J'.'RU5UX1BIU'.'FZF'.'Ug'.'==','TkdJT'.'lg=','b'.'WFp'.'bg==','dXBk'.'YX'.'R'.'lX3'.'Vz'.'ZV9uZ'.'2lue'.'A'.'==','WQ==','U01'.'E','b'.'WF'.'pbg==','d'.'XBkY'.'XRlX3Nh'.'Zm'.'VfbW9kZQ'.'==','Tg==','V'.'kVSU'.'0lPTg='.'=','VF'.'lQRU5'.'D','Q0hIQg==','SFRUUF9IT1NU','Q1NB'.'Q'.'g==','U0'.'VSVkV'.'SX0FER'.'FI=','U1VJRA'.'==','QVBQ'.'TElDQVRJT'.'04=','','Y2x1c3'.'Rlcg==','Q0Ns'.'dXN0ZXI=','P'.'UFDVElWRQ==','W'.'Q==','L2JpdHJpeC9t'.'b2R1bGVzL21haW4vY2xh'.'c3Nlcy'.'9nZW'.'5lcm'.'FsL3VwZG'.'F0ZV9'.'jbG'.'llbnQu'.'cGhw','LQ==',''.'bWFpbg==','Tg'.'==','RA'.'==','RQ==','VA==','Rg==','L2J'.'pdHJp'.'eC'.'9t'.'b2R'.'1'.'bGVzL21'.'ha'.'W4'.'v'.'Y2xhc3Nl'.'cy'.'9n'.'Z'.'W5lc'.'mF'.'sL3VwZGF0ZV9jbG'.'l'.'lbnQucGh'.'w','','L2Jp'.'dHJpeC9tb2'.'R1b'.'GVzL21'.'haW4'.'vY2'.'xh'.'c3Nlc'.'y9nZ'.'W5lcmFsL'.'3'.'VwZGF0Z'.'V9j'.'bGllb'.'nQucG'.'hw','');return base64_decode($_84810897[$_2141346854]);}}; use Bitrix\Main\Application; use Bitrix\Main\License; use Bitrix\Main\Loader; use Bitrix\Main\SystemException; use Bitrix\Main\SiteTable; class PortalInfo{ private License $_1055890410; public function __construct(){ $this->_1055890410= Application::getInstance()->getLicense();} public function common(): array{ global $DB; return[ ___386678359(0) => $this->_1055890410->getHashLicenseKey(), ___386678359(1) => LANGUAGE_ID, ___386678359(2) => ___386678359(3), ___386678359(4) => \COption::GetOptionString(___386678359(5), ___386678359(6), ___386678359(7)), ___386678359(8) => $GLOBALS['____1158064882'][0](___386678359(9))? ___386678359(10): ___386678359(11), ___386678359(12) => $DB->type, ___386678359(13) =>(isset($DB->_254330542) && $DB->_254330542)? ___386678359(14): ___386678359(15), ___386678359(16) => $this->_1055890410->getActiveUsersCount(), ___386678359(17) => $_SERVER[___386678359(18)], ___386678359(19) => \COption::GetOptionString(___386678359(20), ___386678359(21), ___386678359(22)), ___386678359(23) => $this->__906343668(), ___386678359(24) => $GLOBALS['____1158064882'][1](___386678359(25))? UPDATE_SYSTEM_VERSION_A: ___386678359(26), ___386678359(27) => $this->__506018280() ?? ___386678359(28), ___386678359(29) => ___386678359(30), ___386678359(31) => $this->__1859465875() ?? ___386678359(32), ___386678359(33) => $this->__1037268550(), ___386678359(34) => $GLOBALS['____1158064882'][2](), ___386678359(35) => \COption::GetOptionString(___386678359(36), ___386678359(37), ___386678359(38)), ___386678359(39) => \COption::GetOptionString(___386678359(40), ___386678359(41), ___386678359(42)), ___386678359(43) => SM_VERSION, ___386678359(44) => $this->getLicenseType(), ___386678359(45) => $_SERVER[___386678359(46)], ___386678359(47) => $_SERVER[___386678359(48)], ___386678359(49) => $GLOBALS[___386678359(50)]->GetServerUniqID(),];} private function __906343668(): string{ global $DB; $_984362673= $DB->GetVersion(); return $_984362673 !== false? $_984362673: ___386678359(51);} private function __506018280():?int{ if(Loader::includeModule(___386678359(52)) && $GLOBALS['____1158064882'][3](___386678359(53))){ return \CCluster::getServersCount();} return null;} private function __1859465875():?int{ return SiteTable::getCount([___386678359(54) => ___386678359(55)]);} private function __1037268550(): string{ require_once(Application::getDocumentRoot(). ___386678359(56)); $_1266613322= \CUpdateClient::getNewLicenseSignedKey(); return $_1266613322.___386678359(57).\COption::GetOptionString(___386678359(58), $_1266613322, ___386678359(59));} public function getLicenseType(): string{ if($this->_1055890410->isDemo()){ return ___386678359(60);} elseif($this->_1055890410->isEncoded()){ return ___386678359(61);} elseif($this->_1055890410->isTimeBound()){ return ___386678359(62);} else{ return ___386678359(63);}} public function getModules(): array{ require_once(Application::getDocumentRoot(). ___386678359(64)); $_927072068= ___386678359(65); $_192252854= \CUpdateClient::GetCurrentModules($_927072068); $_1806739076=(\CUpdateExpertMode::isEnabled() && \CUpdateExpertMode::isCorrectModulesStructure([])); if($_1806739076){ $_192252854= \CUpdateExpertMode::processModulesFrom([], $_192252854);} if(!empty($_927072068)){ throw new SystemException($_927072068);} return $_192252854;} public function getLanguages(): array{ require_once(Application::getDocumentRoot(). ___386678359(66)); $_927072068= ___386678359(67); $_846788705= \CUpdateClient::GetCurrentLanguages($_927072068); if(!empty($_927072068)){ throw new SystemException($_927072068);} return $_846788705;}}?>